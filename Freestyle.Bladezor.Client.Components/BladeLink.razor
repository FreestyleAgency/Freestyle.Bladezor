@implements IDisposable
@using System.Reflection
@using System.Collections.Generic
@using System.Collections.ObjectModel
@inject INavigationState NavigationState
@inject IPortalService PortalService

@* HACK: the "target" value here is important so as to not trigger the built-in interception mechanism in Blazor *@
<a href="@Url" @onclick="Intercept" target="__stack" class="@CssClass @(active ? ActiveCssClass : String.Empty)" @onclick:stopPropagation @onclick:preventDefault>@ChildContent</a>

@code {
	static readonly ReadOnlyDictionary<string, object> _emptyParametersDictionary = new ReadOnlyDictionary<string, object>(new Dictionary<string, object>());

	private bool active = false;

	[Parameter]
	public string Url { get; set; }

	[Parameter]
	public string BladeTitle { get; set; }

	[Parameter]
	public string BladeSubtitle { get; set; }

	[Parameter]
	public string ActiveCssClass { get; set; }

	[Parameter]
	public string CssClass { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[CascadingParameter(Name = "Router")]
	public Router Router { get; set; }

	[Parameter]
	public string BladeCssClass { get; set; }

	[Parameter]
	public EventCallback<BladeContext> BladeShown { get; set; }

	[Parameter]
	public EventCallback<BladeContext> BladeClosed { get; set; }

	[Parameter]
	public EventCallback<object> BladeReturnValueChanged { get; set; }

	[CascadingParameter(Name = "BladeContext")]
	public BladeContext BladeContext { get; set; }

	[CascadingParameter(Name = "BladeStack")]
	public BladeStack BladeStack { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	protected override void OnInitialized()
	{
		BladeStack.StackChanged += OnStackChanged;

		base.OnInitialized();
	}

	private void OnStackChanged(object sender, EventArgs eventArgs)
	{
		active = BladeStack.Blades.Any(x => x.Url == Url);
	}

	private async Task Intercept()
	{
		var bladeContext = await PortalService.OpenBlade(
			context => {
				context.Title = BladeTitle;
				context.Subtitle = BladeSubtitle;
				context.CssClass = BladeCssClass;

				context.Closed += (s, e) => BladeClosed.InvokeAsync(context);
				context.ReturnValueChanged += (s, e) => BladeReturnValueChanged.InvokeAsync(e.Value);
			}, 
			Url,
			Router,
			BladeStack,
			BladeContext,
			AdditionalAttributes
		);

		await BladeShown.InvokeAsync(bladeContext);
	}

	public void Dispose()
	{
		BladeStack.StackChanged -= OnStackChanged;
	}
}
