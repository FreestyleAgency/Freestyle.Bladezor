@implements IDisposable
@using System.Reflection
@using System.Collections.Generic
@using System.Collections.ObjectModel
@inject INavigationState NavigationState
@inject IPortalService PortalService
@typeparam TModal

<Button ShowSpinner="ShowSpinner" AutoLoadingState="AutoLoadingState" ButtonStyle="ButtonStyle" Text="@Text" IconCssClass="@IconCssClass" IconPosition="IconPosition" Enabled="Enabled" Block="Block" Size="Size" @onclick="Intercept" type="button" />

@code {
	static readonly ReadOnlyDictionary<string, object> _emptyParametersDictionary = new ReadOnlyDictionary<string, object>(new Dictionary<string, object>());

	[Parameter]
	public string ModalTitle { get; set; }

	[CascadingParameter(Name = "Router")]
	public Router Router { get; set; }

	[Parameter]
	public string ModalCssClass { get; set; }

	[Parameter]
	public EventCallback<ModalContext> ModalShown { get; set; }

	[Parameter]
	public EventCallback<ModalContext> ModalClosed { get; set; }

	[Parameter]
	public EventCallback<object> ModalReturnValueChanged { get; set; }

	[Parameter]
	public bool ShowSpinner { get; set; }

	[Parameter]
	public bool AutoLoadingState { get; set; } = true;

	[Parameter]
	public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;

	[Parameter]
	public string Text { get; set; }

	[Parameter]
	public string IconCssClass { get; set; }

	[Parameter]
	public LeftRightHorizontalAlignment IconPosition { get; set; } = LeftRightHorizontalAlignment.Left;

	[Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public bool Block { get; set; }

	[Parameter]
	public ButtonSize Size { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	private async Task Intercept()
	{
		var modalContext = await PortalService.OpenModal<TModal>(context =>
		{
			context.Title = ModalTitle;
			context.CssClass = ModalCssClass;

			context.Closed += (s, e) => ModalClosed.InvokeAsync(context);
			context.ReturnValueChanged += (s, e) => ModalReturnValueChanged.InvokeAsync(e.Value);
		}, AdditionalAttributes);

		await ModalShown.InvokeAsync(modalContext);
	}

	public void Dispose()
	{

	}
}
